AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: 'AWS CloudFormation Sample Template to Create EC2Instance With Additional 1GB EBS and a EIP'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: Lockdown SSH access to the bastion host (default can be accessed
      from anywhere)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref 'KeyName'
      Tags:
          - Key: Name
            Value: EC2TestSample
      InstanceType: !Ref 'InstanceType'
        # Hardcode the AMI ImageId to Amazon Linux2
      ImageId: "ami-39f8215b"
      SecurityGroups: [!Ref 'EC2SecurityGroup']
      BlockDeviceMappings:
        # Create a separate 1GB volume
        - DeviceName: /dev/xvdb
          Ebs:
            DeleteOnTermination: true
            VolumeSize: 1
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash

          # create partition, by default disk is /dev/xvdb
          echo -e "o\nn\np\n1\n\n\nw" | fdisk /dev/xvdb

          #format the partition if using ext4
          /sbin/mkfs.ext4 /dev/xvdb1

          #create a directory to mount
          mkdir /apps
          mount /dev/xvdb1 /apps

          #check UUID and filesystem of xvdb1
          export Disk_UUID=`blkid /dev/xvdb1 |  awk -F'"' '{print $2}'`
          export Disk_Filesystem=`blkid /dev/xvdb1 |  awk -F'"' '{print $4}'`

          #put the UUID into the fstab
          export Disk_UUID=`blkid /dev/xvdb1 |  awk -F'"' '{print $2}'`
          export Disk_Filesystem=`blkid /dev/xvdb1 |  awk -F'"' '{print $4}'`
          sh -c 'echo UUID=$Disk_UUID /apps  $Disk_Filesystem   defaults,nofail 0 2 >> /etc/fstab'
  IPAddress:
    #Create a Public IP for EIP
    Type: AWS::EC2::EIP
  IPAssoc:
    #Associate the EIP to EC2
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'EC2Instance'
      EIP: !Ref 'IPAddress'    
  
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
Outputs:
  Instance:
    Value: !GetAtt [EC2Instance, PublicDnsName]
    Description: DNS Name of the newly created EC2 instance
